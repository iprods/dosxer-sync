#!/usr/bin/env bash

set -o pipefail

#
# This script aims to ease the use of the unison sync process.
# Basically it does:
# * Initially sync of the sync container
# * Start the dev environment with the container as volume
# * Pipes the output to a log file for reference
# * Runs in the background so the user is best not noticing it at all
#

version="0.2.0"
script_dir="$( dirname "${BASH_SOURCE[0]}" )"
sync_src_dir=`pwd`
sync_dest_dir="" # Is set later to the real value
unison_profile_name="dosxer_unison_$(basename "${sync_src_dir}")"
unison_profile_path=${HOME}"/Library/Application Support/Unison/${unison_profile_name}.prf"
unison_custom_settings_filepath=`pwd`"/dosxer_unison.conf"
# TODO Make configurable
sync_container_pattern="container_name.*dosxer"
sync_log=${sync_dir}/dosxer_sync.log
sync_pid=${sync_dir}/.dosxer_sync.pid
sync_init=${sync_dir}/.dosxer_init
docker_compose_cmd="docker-compose -f docker-compose.yml -f docker-compose-dev.yml"

# Send desktop notifications to the user
function notify_user {
    message=$1
    terminal-notifier -title "Dosxer sync" -activate "com.apple.Terminal" -message "${message}"
}

# Get the unison profile
function get_unison_profile {
    sync_dest_dir="socket://localhost:$(get_host_port)/"
    echo "
# This file is auto-generated by dosxer-sync. DO NOT MODIFY!
# Sync roots
root=${sync_src_dir}
root=${sync_dest_dir}

# Unison options
auto=true
batch=true
contactquietly=true
fastcheck=true
backups=false
maxthreads=10
prefer=${sync_src_dir}
silent=false

# Default ignore list
ignore=Path .git
ignore=Path .idea
ignore=Path node_modules/.staging
ignore=Path docker
ignore=Name docker*
ignore=Name .dosxer*
ignore=Name dosxer*
$@
    " > "${unison_profile_path}"
    if [[ -f "${unison_custom_settings_filepath}" ]]; then
        echo "  Adding additional sync settings from ${unison_custom_settings_filepath}"
        cat "${unison_custom_settings_filepath}" >> "${unison_profile_path}"
    fi
    echo "  Created ${unison_profile_path}"
}

# Grep out the host bound port of the sync container
function get_host_port {
    # TODO This is a clumsy approach. Look how it can be approved.
    echo $(docker inspect --format="{{json .NetworkSettings.Ports }}" $(${docker_compose_cmd} config | grep -e "${sync_container_pattern}" | cut -d " " -f6) | cut -d \" -f10)
}

# Get the service name of the sync service; convention is to contain the string dosxer
function get_dosxer_service_name {
    echo $(${docker_compose_cmd} config --services | grep dosxer)
}

# Start unison bg process
function start_host_unison {
    get_unison_profile "repeat=watch"
    nohup unison ${unison_profile_name} >${sync_log} 2>&1 &
    echo $! > ${sync_pid}
}

# Tear down the local / host unison process
function stop_host_unison {
    if [[ ! -f ${sync_pid} ]]; then
        echo -e "  \x1b[0;33mNo pid file found. Nothing to stop.\x1b[0m"
        return
    fi
    pid=$(cat ${sync_pid})
    rm ${sync_pid} >/dev/null 2>&1
    kill -15 ${pid} >/dev/null 2>&1
}

# Perform an initial one-time-sync to avoid problems if a volume dependent container cannot be started
function perform_initial_stack_sync {
    echo -ne "  Performing initial sync\r"
    local start=`date +%s`
    # TODO Make compose file configurable.
    stop_host_unison
    # First to be sure purge the stack
    ${docker_compose_cmd} down >/dev/null 2>&1
    output_docker=$(${docker_compose_cmd} up -d $(get_dosxer_service_name) 2>&1)
    if [[ ! $? -eq 0 ]]; then
        # Most likely a port clash
        echo -e "\x1b[0;31mFailed to start stack. Reason: ${output_docker}\x1b[0m"
        notify_user "✝ Failed to start stack. Please see terminal for info."
        exit 1
    fi
    # Initial sync. This should end successfully.
    get_unison_profile
    unison ${unison_profile_name} >${sync_log} 2>&1
    if [[ $? -eq 1 ]]; then
        echo -e "  \x1b[0;33mInitial sync needs to be restarted.\x1b[0m"
    fi
    local end=`date +%s`
    local runtime=$((end-start))
    echo -e "\x1b[0;32m✓ \x1b[0mPerforming initial sync"
    touch ${sync_init}
    # Notify user
    if [[ $@ -eq 0 ]]; then
        notify_user "✓ Initial sync has finished in ${runtime}s. Reloading and starting to watch stack."
    else
        notify_user "✝ Initial sync has failed after ${runtime}s. Please see ${sync_log} for details."
    fi
}

# Start the docker stack and start the local unison client
function start_sync_stack {
    if [ ! -f ${sync_init} ]; then
        perform_initial_stack_sync
    fi
    echo -e "  Starting to watch for changes..."
    stop_host_unison
    rm ${sync_log} >/dev/null 2>&1
    ${docker_compose_cmd} stop >/dev/null 2>&1
    ${docker_compose_cmd} up -d >/dev/null 2>&1
    if [[ $? -eq 0 ]]; then
        start_host_unison
        notify_user "✓ Starting to watch stack. [unison pid: $!; local port: $(get_host_port)]"
    else
        notify_user "✝ Starting stack failed. Please see ${sync_log} for details."
    fi
}

# Restart the docker stack and the local unison client
function restart_sync_stack {
    echo -e "  Restarting stack..."
    stop_host_unison
    rm ${sync_log} >/dev/null 2>&1
    ${docker_compose_cmd} restart >/dev/null 2>&1
    start_host_unison
    if [[ $? -eq 0 ]]; then
        notify_user "✓ Restarted stack. [$!; local port: $(get_host_port)]"
    else
        notify_user "✝ Restart failed."
    fi
}

function stop_sync_stack {
    echo -e "  Stopping stack..."
    if [[ ! -f ${sync_pid} ]]; then
        notify_user "✝ Local unison process could not be stopped. See terminal for more information."
        echo -e "\x1b[0;31mNo pid file found. Please use ps aux | grep unison and kill -15 the process yourself.\x1b[0m"
        return
    fi
    kill -15 $(cat ${sync_pid}) >/dev/null 2>&1
    ${docker_compose_cmd} stop >/dev/null 2>&1
    rm ${sync_pid} >/dev/null 2>&1
    rm ${sync_log} >/dev/null 2>&1
    rm ${unison_profile_path} >/dev/null 2>&1
    if [[ $? -eq 0 ]]; then
        notify_user "✓ Stopped stack."
    else
        notify_user "✝ Failed to stop stack."
    fi
}

# Stop the unison client and tear down the Docker container
function destroy_sync_stack {
    stop_host_unison
    # First to be sure purge the stack
    ${docker_compose_cmd} down >/dev/null 2>&1
    rm ${sync_init} >/dev/null 2>&1;
    if [[ $? -eq 0 ]]; then
        notify_user "✓ Torn down stack."
    else
        notify_user "✝ Failed to tear down stack."
    fi
}

# Destroy the complete stack
function destroy {
    if [ ${quiet_mode} == 1 ]; then
        destroy_sync_stack
    else
        read -p "Do you want to destroy? (y/N) " yn
        case ${yn} in
            [Yy]* ) destroy_sync_stack;;
            [Nn]* ) exit;;
            * ) exit;;
        esac
    fi
}

# Reset the sync stack
function reset {
    if [ ${quiet_mode} == 1 ]; then
        rm ${sync_init} >/dev/null 2>&1
        perform_initial_stack_sync
        start_sync_stack
    else
        read -p "Do you want to reset the sync? (y/N) " yn
        case ${yn} in
            [Yy]* ) rm ${sync_init} >/dev/null 2>&1; perform_initial_stack_sync; start_sync_stack;;
            [Nn]* ) exit;;
            * ) exit;;
        esac
    fi
}

# Get the short help text
function get_short_help {
    echo "Usage: $0 start|restart|stop|reset|destroy|logs"
}

# Get the full help text
function get_help {
    echo "
    Welcome to dosxer-sync v${version}.

    The following actions are possible:

    start   : Init or just start the sync container and the local sync process
    restart : Restart the sync container and the local sync process
    stop    : Stop the sync container and the local sync process
    reset   : Reset the sync container (same as init)
    destroy : Remove the sync container and stop the local sync process
    logs    : Tail the local sync log

    The following options are applicable:

    -h, --help Display this help
    -v, --version Display the version
    -q, --no-interaction Don't ask when destroying or resetting
    "
} 

# run program

[ $# -eq 0 ] && { get_short_help; exit 1; }
valid_actions=( start restart stop reset destroy logs )
valid=0
quiet_mode=0
for i in "$@"; do
    case ${i} in
        -h|--help)
            get_help
            exit 0            
        ;;
        -v|--version)
            echo "dosxer-sync v${version}"
            exit 0
        ;;
        -q|--no-interaction)
            quiet_mode=1
        ;;
        *)
        for j in "${valid_actions[@]}"; do
            action=$i
            if [ $j == $i ]; then
                valid=1
            fi
        done
        ;;
    esac
done
if [ ${valid} == 0 ]; then
    echo "Invalid action: ${action}"
    get_short_help
    exit 1
fi
case "${action}" in 
    "reset" ) reset;;
    "start" ) start_sync_stack;;
    "restart" ) restart_sync_stack;;
    "stop" ) stop_sync_stack;;
    "destroy" ) destroy;;
    "logs" ) tail -F ${sync_log};;
    * ) exit 1;;
esac
